-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lstm_function_lstm_function_Pipeline_VITIS_LOOP_64_2_lstm_weights_1_txt_0_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 200
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of lstm_function_lstm_function_Pipeline_VITIS_LOOP_64_2_lstm_weights_1_txt_0_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "110011000000000", 1 => "110110100000000", 2 => "111101100000000", 3 => "111010000000000", 
    4 => "110011100000000", 5 => "111100000000000", 6 => "110101100000000", 7 => "111110100000000", 
    8 => "000110100000000", 9 => "000101000000000", 10 => "111000000000000", 11 => "111100000000000", 
    12 => "111000100000000", 13 => "111000000000000", 14 => "111101000000000", 15 => "000110100000000", 
    16 => "111101100000000", 17 => "110110100000000", 18 => "110100000000000", 19 => "000110000000000", 
    20 => "001000000000000", 21 => "111011100000000", 22 => "111000000000000", 23 => "000110100000000", 
    24 => "000110000000000", 25 => "111000100000000", 26 => "111101000000000", 27 => "111100000000000", 
    28 => "111101100000000", 29 => "111110100000000", 30 => "001000100000000", 31 => "000100000000000", 
    32 => "001000100000000", 33 => "000001100000000", 34 => "000111100000000", 35 => "000011000000000", 
    36 => "111011100000000", 37 => "110101000000000", 38 => "000100000000000", 39 => "001000000000000", 
    40 => "000100000000000", 41 => "111110100000000", 42 => "111000000000000", 43 => "111101000000000", 
    44 => "000010000000000", 45 => "111111000000000", 46 => "001000000000000", 47 => "111010000000000", 
    48 => "111110000000000", 49 => "110101000000000", 50 => "000110100000000", 51 => "000110000000000", 
    52 => "110101000000000", 53 => "111000100000000", 54 => "111101100000000", 55 => "111010000000000", 
    56 => "000000000000000", 57 => "000001100000000", 58 => "111100100000000", 59 => "110111100000000", 
    60 => "000101100000000", 61 => "111011000000000", 62 => "111000000000000", 63 => "111000100000000", 
    64 => "111101100000000", 65 => "111000100000000", 66 => "000001100000000", 67 => "110011100000000", 
    68 => "110011100000000", 69 => "111011000000000", 70 => "110011100000000", 71 => "000011000000000", 
    72 => "111001100000000", 73 => "111101100000000", 74 => "000110000000000", 75 => "110111100000000", 
    76 => "111010100000000", 77 => "110100000000000", 78 => "111011100000000", 79 => "110100000000000", 
    80 => "111101000000000", 81 => "000110000000000", 82 => "111100000000000", 83 => "000111000000000", 
    84 => "111110100000000", 85 => "110101000000000", 86 => "110111000000000", 87 => "111001100000000", 
    88 => "110100000000000", 89 => "111101100000000", 90 => "001000100000000", 91 => "000011100000000", 
    92 => "110011100000000", 93 => "111100100000000", 94 => "111100100000000", 95 => "000110000000000", 
    96 => "111100100000000", 97 => "110100000000000", 98 => "001000000000000", 99 => "111110000000000", 
    100 => "000101000000000", 101 => "000001000000000", 102 => "000010000000000", 103 => "000001000000000", 
    104 => "001001000000000", 105 => "000110100000000", 106 => "110101000000000", 107 => "000110100000000", 
    108 => "000000100000000", 109 => "001010100000000", 110 => "000110000000000", 111 => "000011100000000", 
    112 => "001001000000000", 113 => "110100000000000", 114 => "000000000000000", 115 => "001010000000000", 
    116 => "000011000000000", 117 => "110110100000000", 118 => "110111000000000", 119 => "000000100000000", 
    120 => "111111100000000", 121 => "111010100000000", 122 => "111011100000000", 123 => "001001000000000", 
    124 => "111110100000000", 125 => "111000100000000", 126 => "111011000000000", 127 => "111001100000000", 
    128 => "000000000000000", 129 => "111000000000000", 130 => "000001100000000", 131 => "111111000000000", 
    132 => "001011000000000", 133 => "111000000000000", 134 => "000001000000000", 135 => "111010000000000", 
    136 => "000011100000000", 137 => "110101000000000", 138 => "000011000000000", 139 => "000100000000000", 
    140 => "111101100000000", 141 => "000011100000000", 142 => "110101100000000", 143 => "000111000000000", 
    144 => "111111000000000", 145 => "001001100000000", 146 => "000111100000000", 147 => "000010100000000", 
    148 => "111011100000000", 149 => "111000100000000", 150 => "111011000000000", 151 => "111001100000000", 
    152 => "101110100000000", 153 => "110100100000000", 154 => "110000000000000", 155 => "110101100000000", 
    156 => "110101100000000", 157 => "110001000000000", 158 => "110111000000000", 159 => "110000000000000", 
    160 => "101011100000000", 161 => "101011000000000", 162 => "111110000000000", 163 => "101000000000000", 
    164 => "111100100000000", 165 => "111001000000000", 166 => "110000100000000", 167 => "111100100000000", 
    168 => "111100100000000", 169 => "101011000000000", 170 => "101101000000000", 171 => "111000100000000", 
    172 => "101110100000000", 173 => "110000100000000", 174 => "111011100000000", 175 => "110010100000000", 
    176 => "101100000000000", 177 => "110110000000000", 178 => "110000000000000", 179 => "101000100000000", 
    180 => "110110000000000", 181 => "111010000000000", 182 => "101011000000000", 183 => "111011000000000", 
    184 => "101110100000000", 185 => "111001100000000", 186 => "110111100000000", 187 => "110000000000000", 
    188 => "110001100000000", 189 => "110011100000000", 190 => "110100100000000", 191 => "110000000000000", 
    192 => "110000100000000", 193 => "111100000000000", 194 => "110111000000000", 195 => "111001000000000", 
    196 => "111100000000000", 197 => "110100100000000", 198 => "111011100000000", 199 => "110000100000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

